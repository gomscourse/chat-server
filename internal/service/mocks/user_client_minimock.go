// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/gomscourse/chat-server/internal/service.UserClient -o user_client_minimock.go -n UserClientMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserClientMock implements service.UserClient
type UserClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheckUsersExistence          func(ctx context.Context, usernames []string) (err error)
	inspectFuncCheckUsersExistence   func(ctx context.Context, usernames []string)
	afterCheckUsersExistenceCounter  uint64
	beforeCheckUsersExistenceCounter uint64
	CheckUsersExistenceMock          mUserClientMockCheckUsersExistence
}

// NewUserClientMock returns a mock for service.UserClient
func NewUserClientMock(t minimock.Tester) *UserClientMock {
	m := &UserClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckUsersExistenceMock = mUserClientMockCheckUsersExistence{mock: m}
	m.CheckUsersExistenceMock.callArgs = []*UserClientMockCheckUsersExistenceParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserClientMockCheckUsersExistence struct {
	mock               *UserClientMock
	defaultExpectation *UserClientMockCheckUsersExistenceExpectation
	expectations       []*UserClientMockCheckUsersExistenceExpectation

	callArgs []*UserClientMockCheckUsersExistenceParams
	mutex    sync.RWMutex
}

// UserClientMockCheckUsersExistenceExpectation specifies expectation struct of the UserClient.CheckUsersExistence
type UserClientMockCheckUsersExistenceExpectation struct {
	mock    *UserClientMock
	params  *UserClientMockCheckUsersExistenceParams
	results *UserClientMockCheckUsersExistenceResults
	Counter uint64
}

// UserClientMockCheckUsersExistenceParams contains parameters of the UserClient.CheckUsersExistence
type UserClientMockCheckUsersExistenceParams struct {
	ctx       context.Context
	usernames []string
}

// UserClientMockCheckUsersExistenceResults contains results of the UserClient.CheckUsersExistence
type UserClientMockCheckUsersExistenceResults struct {
	err error
}

// Expect sets up expected params for UserClient.CheckUsersExistence
func (mmCheckUsersExistence *mUserClientMockCheckUsersExistence) Expect(ctx context.Context, usernames []string) *mUserClientMockCheckUsersExistence {
	if mmCheckUsersExistence.mock.funcCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("UserClientMock.CheckUsersExistence mock is already set by Set")
	}

	if mmCheckUsersExistence.defaultExpectation == nil {
		mmCheckUsersExistence.defaultExpectation = &UserClientMockCheckUsersExistenceExpectation{}
	}

	mmCheckUsersExistence.defaultExpectation.params = &UserClientMockCheckUsersExistenceParams{ctx, usernames}
	for _, e := range mmCheckUsersExistence.expectations {
		if minimock.Equal(e.params, mmCheckUsersExistence.defaultExpectation.params) {
			mmCheckUsersExistence.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckUsersExistence.defaultExpectation.params)
		}
	}

	return mmCheckUsersExistence
}

// Inspect accepts an inspector function that has same arguments as the UserClient.CheckUsersExistence
func (mmCheckUsersExistence *mUserClientMockCheckUsersExistence) Inspect(f func(ctx context.Context, usernames []string)) *mUserClientMockCheckUsersExistence {
	if mmCheckUsersExistence.mock.inspectFuncCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("Inspect function is already set for UserClientMock.CheckUsersExistence")
	}

	mmCheckUsersExistence.mock.inspectFuncCheckUsersExistence = f

	return mmCheckUsersExistence
}

// Return sets up results that will be returned by UserClient.CheckUsersExistence
func (mmCheckUsersExistence *mUserClientMockCheckUsersExistence) Return(err error) *UserClientMock {
	if mmCheckUsersExistence.mock.funcCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("UserClientMock.CheckUsersExistence mock is already set by Set")
	}

	if mmCheckUsersExistence.defaultExpectation == nil {
		mmCheckUsersExistence.defaultExpectation = &UserClientMockCheckUsersExistenceExpectation{mock: mmCheckUsersExistence.mock}
	}
	mmCheckUsersExistence.defaultExpectation.results = &UserClientMockCheckUsersExistenceResults{err}
	return mmCheckUsersExistence.mock
}

// Set uses given function f to mock the UserClient.CheckUsersExistence method
func (mmCheckUsersExistence *mUserClientMockCheckUsersExistence) Set(f func(ctx context.Context, usernames []string) (err error)) *UserClientMock {
	if mmCheckUsersExistence.defaultExpectation != nil {
		mmCheckUsersExistence.mock.t.Fatalf("Default expectation is already set for the UserClient.CheckUsersExistence method")
	}

	if len(mmCheckUsersExistence.expectations) > 0 {
		mmCheckUsersExistence.mock.t.Fatalf("Some expectations are already set for the UserClient.CheckUsersExistence method")
	}

	mmCheckUsersExistence.mock.funcCheckUsersExistence = f
	return mmCheckUsersExistence.mock
}

// When sets expectation for the UserClient.CheckUsersExistence which will trigger the result defined by the following
// Then helper
func (mmCheckUsersExistence *mUserClientMockCheckUsersExistence) When(ctx context.Context, usernames []string) *UserClientMockCheckUsersExistenceExpectation {
	if mmCheckUsersExistence.mock.funcCheckUsersExistence != nil {
		mmCheckUsersExistence.mock.t.Fatalf("UserClientMock.CheckUsersExistence mock is already set by Set")
	}

	expectation := &UserClientMockCheckUsersExistenceExpectation{
		mock:   mmCheckUsersExistence.mock,
		params: &UserClientMockCheckUsersExistenceParams{ctx, usernames},
	}
	mmCheckUsersExistence.expectations = append(mmCheckUsersExistence.expectations, expectation)
	return expectation
}

// Then sets up UserClient.CheckUsersExistence return parameters for the expectation previously defined by the When method
func (e *UserClientMockCheckUsersExistenceExpectation) Then(err error) *UserClientMock {
	e.results = &UserClientMockCheckUsersExistenceResults{err}
	return e.mock
}

// CheckUsersExistence implements service.UserClient
func (mmCheckUsersExistence *UserClientMock) CheckUsersExistence(ctx context.Context, usernames []string) (err error) {
	mm_atomic.AddUint64(&mmCheckUsersExistence.beforeCheckUsersExistenceCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckUsersExistence.afterCheckUsersExistenceCounter, 1)

	if mmCheckUsersExistence.inspectFuncCheckUsersExistence != nil {
		mmCheckUsersExistence.inspectFuncCheckUsersExistence(ctx, usernames)
	}

	mm_params := UserClientMockCheckUsersExistenceParams{ctx, usernames}

	// Record call args
	mmCheckUsersExistence.CheckUsersExistenceMock.mutex.Lock()
	mmCheckUsersExistence.CheckUsersExistenceMock.callArgs = append(mmCheckUsersExistence.CheckUsersExistenceMock.callArgs, &mm_params)
	mmCheckUsersExistence.CheckUsersExistenceMock.mutex.Unlock()

	for _, e := range mmCheckUsersExistence.CheckUsersExistenceMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation.params
		mm_got := UserClientMockCheckUsersExistenceParams{ctx, usernames}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckUsersExistence.t.Errorf("UserClientMock.CheckUsersExistence got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckUsersExistence.CheckUsersExistenceMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckUsersExistence.t.Fatal("No results are set for the UserClientMock.CheckUsersExistence")
		}
		return (*mm_results).err
	}
	if mmCheckUsersExistence.funcCheckUsersExistence != nil {
		return mmCheckUsersExistence.funcCheckUsersExistence(ctx, usernames)
	}
	mmCheckUsersExistence.t.Fatalf("Unexpected call to UserClientMock.CheckUsersExistence. %v %v", ctx, usernames)
	return
}

// CheckUsersExistenceAfterCounter returns a count of finished UserClientMock.CheckUsersExistence invocations
func (mmCheckUsersExistence *UserClientMock) CheckUsersExistenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckUsersExistence.afterCheckUsersExistenceCounter)
}

// CheckUsersExistenceBeforeCounter returns a count of UserClientMock.CheckUsersExistence invocations
func (mmCheckUsersExistence *UserClientMock) CheckUsersExistenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckUsersExistence.beforeCheckUsersExistenceCounter)
}

// Calls returns a list of arguments used in each call to UserClientMock.CheckUsersExistence.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckUsersExistence *mUserClientMockCheckUsersExistence) Calls() []*UserClientMockCheckUsersExistenceParams {
	mmCheckUsersExistence.mutex.RLock()

	argCopy := make([]*UserClientMockCheckUsersExistenceParams, len(mmCheckUsersExistence.callArgs))
	copy(argCopy, mmCheckUsersExistence.callArgs)

	mmCheckUsersExistence.mutex.RUnlock()

	return argCopy
}

// MinimockCheckUsersExistenceDone returns true if the count of the CheckUsersExistence invocations corresponds
// the number of defined expectations
func (m *UserClientMock) MinimockCheckUsersExistenceDone() bool {
	for _, e := range m.CheckUsersExistenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckUsersExistenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckUsersExistence != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckUsersExistenceInspect logs each unmet expectation
func (m *UserClientMock) MinimockCheckUsersExistenceInspect() {
	for _, e := range m.CheckUsersExistenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserClientMock.CheckUsersExistence with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckUsersExistenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		if m.CheckUsersExistenceMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserClientMock.CheckUsersExistence")
		} else {
			m.t.Errorf("Expected call to UserClientMock.CheckUsersExistence with params: %#v", *m.CheckUsersExistenceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckUsersExistence != nil && mm_atomic.LoadUint64(&m.afterCheckUsersExistenceCounter) < 1 {
		m.t.Error("Expected call to UserClientMock.CheckUsersExistence")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckUsersExistenceInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckUsersExistenceDone()
}
